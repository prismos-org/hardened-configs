#!/bin/bash

set -oue pipefail

__whitelist=(
    "/usr/lib/polkit-1/polkit-agent-helper-1"
)
__is_in_whitelist() {
    local binary="$1"
    [[ " ${__whitelist[*]} " == *" $binary "* ]]
}
__set_caps() {
    local caps="$1"
    local binary="$2"
    if [[ -e "$binary" && -f "$binary" ]]; then
        echo "Setting capabilities: $caps on $binary"
        if setcap "$caps" "$binary"; then
            echo "Successfully set capabilities: $caps on $binary"
        else
            echo "Failed to set capabilities: $caps on $binary" >&2
        fi
    fi
}

__rename_user() {
    local old_username=$1
    if id "$old_username" &>/dev/null; then
        usermod -l user "$old_username"
        usermod -d /home/user -m user
        sed -i "s|^$old_username:.*|user:/home/user|" /etc/passwd
        echo "Username '$old_username' has been changed to 'user'."
    else
        echo "User '$old_username' does not exist. Skipping."
    fi
}
__main() {
    if [ "$EUID" -ne 0 ]; then
        echo "This script must be run as root."
        exit 1
    fi
    hostnamectl hostname localhost
    echo "hostname changed to 'localhost'."

    read -r -p "Enter the usernames you want to rename (space-separated): " -a usernames
    for old_username in "${usernames[@]}"; do
        __rename_user "$old_username"
    done

    systemctl disable avahi-daemon.socket || true
    systemctl mask avahi-daemon.socket || true
    systemctl disable avahi-daemon.service || true
    systemctl mask avahi-daemon.service || true
    systemctl disable alsa-state || true
    systemctl mask alsa-state || true
    systemctl disable geoclue || true
    systemctl mask geoclue || true
    systemctl disable cups || true
    systemctl mask cups || true
    files=("/usr/bin/chsh" "/usr/bin/chfn" "/usr/bin/pkexec" "/usr/bin/sudo" "/usr/bin/su" "/usr/bin/ksu" "/usr/bin/sg" "/usr/share/applications/gnome-online-accounts-panel.desktop" "qv4l2.desktop" "qvidcap.desktop" "google-maps-geo-handler.desktop")
    for file in "${files[@]}"; do
        rm -f "$file"
    done
    find /usr -type f \( -perm /4000 -o -perm /2000 \) -print0 | while IFS= read -r -d '' binary; do
        if ! __is_in_whitelist "$binary"; then
            if [ -u "$binary" ]; then
                chmod u-s "$binary"
                echo "Removed SETUID bit from $binary"
            fi
            if [ -g "$binary" ]; then
                chmod g-s "$binary"
                echo "Removed SETGID bit from $binary"
            fi
         fi
    done
    __set_caps "cap_dac_read_search,cap_audit_write=ep" "/usr/bin/chage"
    __set_caps "cap_sys_admin=ep" "/usr/bin/fusermount3"
    __set_caps "cap_dac_read_search,cap_audit_write=ep" "/usr/bin/unix_chkpwd"
    touch /usr/share/setup_done
}
__main
rm -f "$0"
